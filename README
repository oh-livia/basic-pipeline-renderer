README for glrender
By Olivia Winn

    This program is a basic pipeline renderer, done for the Computer Graphics class at Columbia. We wrote our programs not in the modle of fixed pipelines, but after the newer, flexible, and faster programmable pipeline model. The program can render object files that are either lists of vertices and triangle ids (triangle meshes), or bezier curves (which are rendered using Casteljau's algorithm), as a crystal ball interface given the format given below:

OBJ file:
~Vertex points are preceded by a v, and the next three floats are taken as the x, y, and z values respectively.
~After all the vertices are listed, the faces of each triangle are given. Each triangle is given in a line with a f at the beginning, and the next three integers are the indices of the vertices (in counterclockwise order) that make up the triangle. The vertices are counted starting at index 1
~Any comments are preceded by a # on the same line, and blank lines are ignored

Bezier Curve:
~The first line is a single digit, which is the number of separate bezier curves the file holds, after which the bezier curves are described in the following manner
~First, two integers are given separated by white space: the u degree and v degree of the bezier curve
~Then, the points of the bezier curve are given such that every three floats across a line is a new point along u, and every new line marks a new v value. The u points increase left to right, and the v points increase bottom to top.

To compile:
On a Mac, type make glrender_os
Otherwise, type make glrender_pc

To run:
Type ./glrender [txt file]
Click and drag the mouse to rotate the object
q or Q: quit the program
r: reset the position of the object
z: zoom in to the object
x: zoom out from the object
s: switch between continuous orange coloring and a 3D black-white checkerboard texture
t: increase the density of the checkerboard
g: decrease the density of the checkerboard
<: for bezier curves, decrease the sample number
>: for bezier curves, increase the sample number

Files:
amath.h, mat.t, vec.g, checkerror.h
    All math functions necessary for pipeline (vectors, matrices, transformations, etc) - given by professor
bunny_regular_small.obj.txt
    A regular object file of a small bunny that can be rendered as a command-line argument
bez.txt
    Two simple bezier curves that can be rendered as a command-line argument
bezObj.cc, bezObj.h
    A bezier object class that holds the u and v coordinates of the bezier surface, and can compute a given number of samples (at the very least computes as many samples as the product of u and v degrees), outputting the corresponding triangles and normals
initShader.cpp
    Initialized the glsl vertex and fragment shaders - given by professor
vshader_passthrough.glsl
    Vertex shader that handles rendering on the vertex level
fshader_passthrough.glsl
    Fragment shader that handles rendering on the fragment (pixel) level
glrender.cc
    Main program - initializes all of the OpenGL and glut components, opens and reads the file, computes all of the vertices and normals and sends them to the shaders. It also handles user input such as mouse movements and keys. The skeleton code was provided by the teacher - the q and r mykey functions, the basic init() and display, and the main. Everythinge else (the parser, for loops in display and init, other mykey functions, etc) are all my own additions
parse_obj.cc, parse_obj.h
    The prototype of and the function that reads the file, determines what kind of object it is, and interprets and saves the data accordingly. The part of the code that reads regular triangle meshes is from the raytracer and was originally from the professor, but the bezier file parser is my own
